AWSTemplateFormatVersion: 2010-09-09
Description: Trend Cloud One All-In-One Onboard Stack

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: 'Please adjust the fields below as required for deployment.'
      Parameters:
      - CloudOneApiKey
      - VisionOneAuthenticationToken
      - VisionOneRegion
      - TrendSolutionTagKey
      - TrendSolutionName
      - ExistingOrganizationalCloudtrailBucketName
    - Label:
        default: 'Warning: Do not modify the fields below unless you know what you
         are doing. Modifications may cause your deployment to fail.'
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      CloudOneApiKey:
        default: CloudOneApiKey

Parameters:
  CloudOneApiKey:
    Description: Cloud One API Key. You can learn more about it at https://cloudone.trendmicro.com/docs/identity-and-account-management/c1-api-key/
    Type: String
    NoEcho: true
  VisionOneAuthenticationToken:
    Description: Vision One Authentication Token. See https://docs.trendmicro.com/en-us/enterprise/trend-vision-one-olh/administrative-setti/user-accounts/obtaining-api-keys-f_001.aspx
    Type: String
    NoEcho: true
  VisionOneRegion:
    Description: Vision One Region. See https://automation.trendmicro.com/xdr/Guides/Regional-Domains
    Type: String
    Default: "United States"
    AllowedValues:
      - "Australia"
      - "European Union"
      - "India"
      - "Japan"
      - "Singapore"
      - "United States"
  TrendSolutionTagKey:
    Description: Tag Key to be used for Trend Cloud One resources
    Type: String
    Default: Solution
  TrendSolutionName:
    Description: Tag Key to be used for Trend Cloud One resources
    Type: String
    Default: 'TrendCloudOne'
  ExistingOrganizationalCloudtrailBucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Description: Bucket name of an existing Organizational CloudTrail. If you do not
      have an existing Organizational CloudTrail, please create one before deploying.
    Type: String
    MinLength: "3"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Deployment bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-abi-pilot
    Description: S3 bucket name for the Deployment assets. Deployment bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Deployment key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: "cfn-abi-trend-cloudone/"
    Description: S3 key prefix for the Deployment assets. Deployment key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    AllowedPattern: ^[a-z][a-z]-[a-z]*-[0-9]*$
    ConstraintDescription: Region name must be a valid AWS region name.
    Default: us-east-1
    Description: Region name for the Deployment bucket.
    Type: String

Resources:
  GetCloudOneRegionAndAccountStack:
    DependsOn: rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneApiKeySecret: !Ref CloudOneApiKeySecret
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        TrendKey: !GetAtt TrendKey.Arn
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/get-cloudone-region-and-account.yaml'
  
  GenerateVisionOneServiceTokenStack:
    DependsOn: rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VisionOneAuthenticationTokenSecret: !Ref VisionOneAuthenticationTokenSecret
        VisionOneRegion: !Ref VisionOneRegion
        TrendKey: !GetAtt TrendKey.Arn
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/vision-one-generate-enrollment-token.yaml'

  VisionOneEnrollmentStack:
    DependsOn: rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneApiKeySecret: !Ref CloudOneApiKeySecret
        CloudOneRegion: !GetAtt GetCloudOneRegionAndAccountStack.Outputs.CloudOneRegion
        VisionOneServiceToken: !GetAtt GenerateVisionOneServiceTokenStack.Outputs.VisionOneEnrollmentToken
        TrendKey: !GetAtt TrendKey.Arn
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/vision-one-enrollment.template.yaml'

  WorkloadSecurityIntegrationStack:
    DependsOn:
      - VisionOneEnrollmentStack
      - rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneApiKeySecret: !Ref CloudOneApiKeySecret
        CloudOneRegion: !GetAtt GetCloudOneRegionAndAccountStack.Outputs.CloudOneRegion
        TrendKey: !GetAtt TrendKey.Arn
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/workloadsecurity.template.yaml'
    
  CloudOneIntegrationStack:
    DependsOn:
      - VisionOneEnrollmentStack
      - rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneRegion: !GetAtt GetCloudOneRegionAndAccountStack.Outputs.CloudOneRegion
        CloudOneAccountID: !GetAtt GetCloudOneRegionAndAccountStack.Outputs.CloudOneAccountId
        CloudOneApiKeySecret: !Ref CloudOneApiKeySecret
        TrendKey: !GetAtt TrendKey.Arn
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/cloudone.template.yaml'
    

  CloudTrailGetInfoStack:
    DependsOn:
      - CloudOneIntegrationStack
      - rCopyZips
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneRegion: !GetAtt GetCloudOneRegionAndAccountStack.Outputs.CloudOneRegion
        CloudOneApiKeySecret: !Ref CloudOneApiKeySecret
        TrendKey: !GetAtt TrendKey.Arn
        TrendStagingS3Bucket: !Ref TrendStagingS3Bucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
      # This CloudFormation template is not available in the public repository. Instead, it is dynamically generated by an API call to Cloud One
      # backend in the CloudFormation Stack above (CloudOneIntegrationStack). This can't be local because of it.
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.${QSS3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}/templates/trend-cloudone-onboard/cloudtrail.template.yaml'

  # CTrl is short for CloudTrail. This is name was truncated because one of the resources in this stack has a 64 character limit.
  CTrl:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ExistingCloudtrailBucketName: !Ref ExistingOrganizationalCloudtrailBucketName
        ServiceToken: !GetAtt CloudTrailGetInfoStack.Outputs.ServiceToken
        ServiceURL: !GetAtt CloudTrailGetInfoStack.Outputs.ServiceURL
        S3BucketName: !GetAtt CloudTrailGetInfoStack.Outputs.S3BucketName
        APIVersion: !GetAtt CloudTrailGetInfoStack.Outputs.APIVersion
      TemplateURL: !GetAtt CloudTrailGetInfoStack.Outputs.TemplateURL

  # Secrets Manager resources to hold the Cloud One API Key and the Vision One Enrollment Token
  TrendKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used to encrypt/decrypt Trend Micro secrets.
      Enabled: true
      EnableKeyRotation: true
      KeySpec: SYMMETRIC_DEFAULT
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'

  CloudOneApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${TrendSolutionName}-CloudOneApiKey-${AWS::StackName}'
      Description: Trend Cloud One API Key
      SecretString: !Ref CloudOneApiKey
      KmsKeyId: !GetAtt TrendKey.Arn

  VisionOneAuthenticationTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${TrendSolutionName}-VisionOneAuthToken-${AWS::StackName}'
      Description: Trend Vision One Auth Key
      SecretString: !Ref VisionOneAuthenticationToken
      KmsKeyId: !GetAtt TrendKey.Arn

  # CopyZips Resources
  TrendStagingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 access logs intentionally not enabled
      checkov:
        skip:
          - id: CKV_AWS_18
            comment: S3 access logs intentionally not enabled
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: !Ref TrendSolutionTagKey
          Value: !Ref TrendSolutionName
      VersioningConfiguration:
        Status: Enabled

  rCopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'rCopyZipsFunction.Arn'
      DestBucket: !Ref 'TrendStagingS3Bucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Sub '${QSS3KeyPrefix}/'
      Objects:
        - lambda_functions/packages/AddAWSAccountToCloudOneFunction/lambda.zip
        - lambda_functions/packages/AWSConnectorCreateLambda/lambda.zip
        - lambda_functions/packages/GetCloudOneRegionAndAccountFunction/lambda.zip
        - lambda_functions/packages/GetCloudTrailStackParametersFunction/lambda.zip
        - lambda_functions/packages/GetExternalIDLambda/lambda.zip
        - lambda_functions/packages/VisionOneEnrollmentFunction/lambda.zip
        - lambda_functions/packages/VisionOneGenerateEnrollmentTokenFunction/lambda.zip
        - lambda_functions/packages/GetOrganizationalTrailBucketName/lambda.zip


  rCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${TrendStagingS3Bucket}/'
                  - !Sub 'arn:${AWS::Partition}:s3:::${TrendStagingS3Bucket}/${QSS3KeyPrefix}/*'
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'

  rCopyZipsFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.9
      MemorySize: 128
      Role: !GetAtt 'rCopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                      Key=key)
          def bucket_exists():
              s3 = boto3.client('s3')
              buckets = s3.list_buckets()
              for bucket in buckets['Buckets']:
                  return True
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              if bucket_exists():
                  objects = {'Objects': [{'Key': prefix + o} for o in objects]}
                  s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                      / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CloudOneWSAPIEndpoint:
    Type: String
    Description: Enter your Cloud One Account Regional Endpoint
  CloudOneAPIKey:
    Type: String
    NoEcho: true
    Description: Enter your Cloud One API Key
Resources:
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Cloud One API Key
      SecretString: !Sub '{"c1apikey":"${CloudOneAPIKey}"}'
  AgentDeploymentScriptFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import urllib3
          import json
          import boto3
          import os
          http = urllib3.PoolManager()
          import re
          import cfnresponse

          # set variables
          url = os.environ['C1_API_ENDPOINT']
          api_key = os.environ['C1_API_KEY']

          # Create an AWS Organizations client
          org_client = boto3.client('organizations')

          # Retrieve the root ID of the organization
          root_id = org_client.list_roots()['Roots'][0]['Id']

          # Recursive function to retrieve all OU IDs in the organization
          def get_all_ou_ids(parent_id):
              ou_ids = []
              paginator = org_client.get_paginator('list_organizational_units_for_parent')
              response_iterator = paginator.paginate(
                  ParentId=parent_id,
                  PaginationConfig={
                      'PageSize': 20
                  }
              )
              for page in response_iterator:
                  for ou in page['OrganizationalUnits']:
                      ou_ids.append(ou['Id'])
                      ou_ids += get_all_ou_ids(ou['Id'])
              return ou_ids

          # Call the function to retrieve all OU IDs in the organization
          all_ou_ids = get_all_ou_ids(root_id)

          def lambda_handler(event, context):
              print(event)
              status = cfnresponse.SUCCESS
              response_data = {}
              physicalResourceId = None
              try:
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                        
                      # get secret
                      client = boto3.client('secretsmanager')
                      secrets = client.get_secret_value(SecretId=api_key)
                      secrets_manager = json.loads(secrets["SecretString"])
                      cloud_one_api_key = secrets_manager["c1apikey"]
                      
                      # Base Deployment Script generation to get params.
                      payload = json.dumps({
                      "platform": "linux",
                      "validateCertificateRequired": True,
                      "validateDigitalSignatureRequired": True,
                      "activationRequired": True,
                      "policyID": 0,
                      "relayGroupID": 0,
                      "computerGroupID": 0
                      })
                      # set request headers to send to ws api
                      headers = {
                      'Authorization': "ApiKey "+ cloud_one_api_key,
                      'api-version': 'v1',
                      'Content-Type': 'application/json'
                      }

                      response = http.request("POST", url, headers=headers, body=payload)
                      response_str = response.data.decode('utf-8') # convert response to string
                      #Filter response values for ACTIVATIONURL, MANAGERURL, TenantID, and Token using regular expressions
                      activation_url = re.search(r"ACTIVATIONURL='(.+?)'", response_str).group(1)
                      manager_url = re.search(r"MANAGERURL='(.+?)'", response_str).group(1)
                      tenant_id = re.search(r'tenantID:(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})', response_str).group(1)
                      token = re.search(r'token:([\w-]+)', response_str).group(1)
                      ou_ids_str = ', '.join(all_ou_ids)
                      ou_ids_str = ou_ids_str.replace('[','').replace(']','').replace("'","")
                      
                      response_data = {"ActivationURL": activation_url, "ManagerURL": manager_url, "TenantID": tenant_id,"Token": token, "OrganizationalUnits": str(ou_ids_str)}
                      
                  else: # if event["RequestType"] == "Delete":
                      physicalResourceId = event["PhysicalResourceId"]
              
              except Exception as e:
                  print(e)
                  status = cfnresponse.FAILED

              cfnresponse.send(event, context, status, response_data, physicalResourceId)


      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 45
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          C1_API_ENDPOINT: !Ref CloudOneWSAPIEndpoint
          C1_API_KEY: !Ref Secret
  
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'SecretsManagerReadAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
        - PolicyName: 'OrganizationsListOUsAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'organizations:ListOrganizationalUnitsForParent'
                  - 'organizations:ListRoots'
                Resource: '*'
  CustomInvokeAgentScriptParser:
    Type: Custom::CustomInvokeAgentScriptParser
    Properties:
      ServiceToken: !GetAtt AgentDeploymentScriptFunction.Arn

Outputs:
  ActivationURL:
    Description: Cloud One Activation URL
    Value: !GetAtt CustomInvokeAgentScriptParser.ActivationURL
  ManagerURL:
    Description: Cloud One Manager URL
    Value: !GetAtt CustomInvokeAgentScriptParser.ManagerURL
  TenantID:
    Description: Cloud One Tenant ID
    Value: !GetAtt CustomInvokeAgentScriptParser.TenantID
  Token:
    Description: Cloud One Token
    Value: !GetAtt CustomInvokeAgentScriptParser.Token
  OrgOUs:
    Description: AWS Organization OUs
    Value: !GetAtt CustomInvokeAgentScriptParser.OrganizationalUnits
